name: FiveM Release
on:
  workflow_call:
permissions:
  contents: write
jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Repository Name
        id: repo_name
        run: echo "repo_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      - name: Get Version from fxmanifest
        id: get_version
        run: |
          VERSION=$(grep -E "version ['\"][0-9]+\.[0-9]+\.[0-9]+['\"]" fxmanifest.lua | sed -E "s/.*version ['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"].*/\1/")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Update scripts.json
        run: |
          # Install jq for JSON manipulation
          sudo apt-get install -y jq
          
          # Path to scripts.json
          JSON_FILE="ata_version/scripts.json"
          
          # Ensure the file exists
          if [ ! -f "$JSON_FILE" ]; then
            echo '{"discord":"https://discord.gg/5tVUgq8","store_name":"Ata Scripts","store_link":"https://ata.tebex.io/"}' > "$JSON_FILE"
          fi
          
          # Repository name and new version
          REPO_KEY="${{ steps.repo_name.outputs.repo_name }}"
          NEW_VERSION="${{ steps.get_version.outputs.version }}"
          
          # Create temp file for JSON update
          TEMP_FILE=$(mktemp)
          
          # Update existing key or add new one
          jq --arg key "$REPO_KEY" --arg ver "$NEW_VERSION" \
            '.[$key] = $ver' "$JSON_FILE" > "$TEMP_FILE"
          
          # Replace original file with updated content
          mv "$TEMP_FILE" "$JSON_FILE"
          
          # Stage and commit changes
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "$JSON_FILE"
          git commit -m "Update scripts.json: Set $REPO_KEY to version $NEW_VERSION"
          git push
      - name: Create Escrow Version
        run: |
          # Create a temp directory for building the zip
          TEMP_DIR="$(pwd)/temp_build_dir"
          mkdir -p "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}"
          
          # Copy files to the folder structure
          rsync -av --exclude='.git/' --exclude='.vscode/' --exclude='.github/' --exclude='*.zip' --exclude='temp_build_dir/' ./ "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}/"
          
          # Create zip
          cd "$TEMP_DIR"
          zip -r "${{ steps.repo_name.outputs.repo_name }}_${{ steps.get_version.outputs.version }}_escrow.zip" "${{ steps.repo_name.outputs.repo_name }}"
          
          # Move the zip back to workspace
          mv "${{ steps.repo_name.outputs.repo_name }}_${{ steps.get_version.outputs.version }}_escrow.zip" "$GITHUB_WORKSPACE/"
          
          # Clean up
          cd "$GITHUB_WORKSPACE"
          rm -rf "$TEMP_DIR"
      - name: Create Open Source Version
        run: |
          # Create a temp directory for building the zip
          TEMP_DIR="$(pwd)/temp_build_dir"
          mkdir -p "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}"
          
          # Copy files to the folder structure
          rsync -av --exclude='.git/' --exclude='.github/' --exclude='*.zip' --exclude='temp_build_dir/' ./ "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}/"
          
          # Create zip
          cd "$TEMP_DIR"
          zip -r "${{ steps.repo_name.outputs.repo_name }}_${{ steps.get_version.outputs.version }}_opensource.zip" "${{ steps.repo_name.outputs.repo_name }}"
          
          # Move the zip back to workspace
          mv "${{ steps.repo_name.outputs.repo_name }}_${{ steps.get_version.outputs.version }}_opensource.zip" "$GITHUB_WORKSPACE/"
          
          # Clean up
          cd "$GITHUB_WORKSPACE"
          rm -rf "$TEMP_DIR"
      - name: Generate Release Tag
        id: tag
        run: echo "release_tag=v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ steps.repo_name.outputs.repo_name }}_${{ steps.get_version.outputs.version }}_escrow.zip
            ${{ steps.repo_name.outputs.repo_name }}_${{ steps.get_version.outputs.version }}_opensource.zip
