name: Build & Release

on:
  workflow_call:

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Bump manifest version
        shell: bash
        run: |
          curl -fsSL https://raw.githubusercontent.com/Ata-Scripts/resource-shared-workflows/refs/heads/main/.github/actions/bump-manifest-version.js -o bump-manifest-version.js
          node bump-manifest-version.js

      - name: Get Version from fxmanifest.lua
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep -E "^version ['\"][0-9]+\.[0-9]+\.[0-9]+['\"]" fxmanifest.lua | sed -E "s/.*version ['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"].*/\1/" | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
            echo "No semantic version found in fxmanifest.lua" >&2
            exit 1
          fi
          echo "version<<EOF" >> $GITHUB_OUTPUT
          echo "$VERSION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        shell: bash
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add fxmanifest.lua
          git commit -m "chore: bump version to ${{ steps.get_version.outputs.version }}"
          git push

      - name: Get Repository Name
        id: repo_name
        shell: bash
        run: echo "repo_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT

      - name: Create Escrow Version
        shell: bash
        run: |
          set -euo pipefail
          TEMP_DIR="$(pwd)/temp_build_dir"
          mkdir -p "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}"
          rsync -a \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='.vscode/' \
            --exclude='*.zip' \
            --exclude='./*.js' \
            --exclude='.gitignore' \
            --exclude='temp_build_dir/' \
            ./ "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}/"
          (cd "$TEMP_DIR" && zip -r "${{ steps.repo_name.outputs.repo_name }}_escrow.zip" "${{ steps.repo_name.outputs.repo_name }}")
          mv "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}_escrow.zip" "$GITHUB_WORKSPACE/"
          rm -rf "$TEMP_DIR"

      - name: Create Open Source Version
        shell: bash
        run: |
          set -euo pipefail
          TEMP_DIR="$(pwd)/temp_build_dir"
          mkdir -p "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}"
          rsync -a \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='.vscode/' \
            --exclude='*.zip' \
            --exclude='./bump-manifest-version.js' \
            --exclude='temp_build_dir/' \
            ./ "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}/"

          # Modify fxmanifest.lua to replace escrow_ignore for opensource version
          MANIFEST_PATH="$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}/fxmanifest.lua"
          if [ -f "$MANIFEST_PATH" ]; then
            # Use awk to replace the entire escrow_ignore block
            awk '
              /^escrow_ignore\s*\{/ {
                print "escrow_ignore {"
                print "    '\''**'\'',"
                print "    '\''**/**'\'',"
                print "    '\''**/**/**'\'',"
                print "    '\''**/**/**/**'\'',"
                print "    '\''**/**/**/**/**'\''"
                print "}"
                # Skip lines until we find the closing brace
                while (getline > 0) {
                  if (/^\}/) break
                }
                next
              }
              { print }
            ' "$MANIFEST_PATH" > "$MANIFEST_PATH.tmp"
            mv "$MANIFEST_PATH.tmp" "$MANIFEST_PATH"
          fi

          (cd "$TEMP_DIR" && zip -r "${{ steps.repo_name.outputs.repo_name }}_opensource.zip" "${{ steps.repo_name.outputs.repo_name }}")
          mv "$TEMP_DIR/${{ steps.repo_name.outputs.repo_name }}_opensource.zip" "$GITHUB_WORKSPACE/"
          rm -rf "$TEMP_DIR"

      - name: Generate Release Tag
        id: tag
        shell: bash
        run: echo "release_tag=v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ steps.repo_name.outputs.repo_name }}_escrow.zip
            ${{ steps.repo_name.outputs.repo_name }}_opensource.zip
          draft: false
          prerelease: false
