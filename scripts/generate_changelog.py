import os
import requests
from datasets import load_dataset

# Get environment variables
webhook_url = os.getenv("DISCORD_WEBHOOK_URL")
hf_api_key = os.getenv("HF_API_KEY")

if not webhook_url:
    print("‚ùå Discord Webhook URL is missing!")
    exit(1)

if not hf_api_key:
    print("‚ùå Hugging Face API Key is missing!")
    exit(1)

# Get changed files from last commit
changed_files = os.popen("git diff --name-only HEAD^ HEAD").read().strip().split("\n")
changed_files = [f.strip() for f in changed_files if f.strip()]

if not changed_files:
    changed_files = ["No files changed"]

# Load Hugging Face dataset (Coq-Changelog)
try:
    dataset = load_dataset("phanerozoic/Coq-Changelog", split="train")
except Exception as e:
    print(f"‚ùå Error loading dataset: {e}")
    dataset = None

# Generate AI-based Changelog
changelog = "No changelog available"
if dataset:
    last_entry = dataset[-1]  # Get last changelog entry
    changelog = f"{last_entry['category']} ({last_entry['type']}): {last_entry['change']}"

# Prepare Discord message
json_payload = {
    "content": f"üöÄ **New Release Detected!**",
    "embeds": [
        {
            "title": "Release Changelog",
            "description": f"**Version:** {os.getenv('GITHUB_REF_NAME')}\n"
                           f"**Changelog:** {changelog}",
            "color": 15258703,
            "fields": [
                {
                    "name": "üìÇ Changed Files",
                    "value": "\n".join(changed_files),
                    "inline": False
                }
            ],
            "footer": {"text": "Generated by GitHub Actions"}
        }
    ]
}

# Send changelog to Discord
response = requests.post(webhook_url, json=json_payload, headers={"Content-Type": "application/json"})

if response.status_code == 204:
    print("‚úÖ Changelog sent to Discord successfully!")
else:
    print(f"‚ùå Failed to send changelog. HTTP {response.status_code}: {response.text}")
